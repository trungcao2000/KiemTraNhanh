import React, { useState } from 'react';
import {
    View,
    Text,
    TouchableOpacity,
    TextInput,
    ScrollView, FlatList
} from 'react-native';

import { styles } from './Style';
import { Giaovien } from './Giaovien';
import { Hocsinh } from './Hocsinh';
import { Camera } from './Camera';
import { Ketqua } from './Ketqua';
import { useResults } from './Context';

// Root App
export default function App() {
    const {
        results,
        setResults,
        points,
        rankThresholds,
        setRankThresholds,
        questions,
        setQuestions,
        students,
        setStudents,
        pointPerQuestion,
        setPointPerQuestion,
        clearAllData,
    } = useResults();
    // Qu·∫£n l√Ω tr·∫°ng th√°i active ƒë·ªÉ chuy·ªÉn tab
    const [active, setActive] = useState(0);
    const [activeSubTab, setActiveSubTab] = useState(0); // chuy·ªÉn v√†o trong ƒë√¢y
    const [showPointInput, setShowPointInput] = useState(false);
    // Welcome screen
    const WelcomeScreen = () => (
        <ScrollView contentContainerStyle={styles.scrollView}>
            <View style={styles.container}>
                <View style={styles.card}>
                    <Text style={styles.title}>üëã Ch√†o m·ª´ng b·∫°n!</Text>
                    <Text style={styles.paragraph}>
                        ·ª®ng d·ª•ng <Text style={{ fontWeight: 'bold' }}>Qu√©t QR</Text> ki·ªÉm tra nhanh.
                    </Text>
                </View>
                <View style={styles.functionSection}>
                    <Text style={styles.subheader}>üîç C√°c ch·ª©c nƒÉng ch√≠nh</Text>
                    <Text style={styles.listItem}>‚Ä¢ Qu√©t m√£ QR t·ª´ c√¢u tr·∫£ l·ªùi h·ªçc sinh</Text>
                    <Text style={styles.listItem}>‚Ä¢ Ph√¢n t√≠ch v√† th·ªëng k√™ k·∫øt qu·∫£</Text>
                    <Text style={styles.listItem}>‚Ä¢ H·ªó tr·ª£ nh·∫≠p xu·∫•t (Excel, PowerPoint)</Text>
                </View>
                <View style={styles.infoCard}>
                    <Text style={styles.infoText}>üóìÔ∏è T√≠nh nƒÉng m·ªõi d·ª± ki·∫øn ra m·∫Øt: <Text style={{ fontWeight: 'bold' }}>Th√°ng 5/2025</Text></Text>
                    <Text style={styles.infoText}>üë®‚Äçüíª Ph√°t tri·ªÉn b·ªüi: <Text style={{ fontWeight: 'bold' }}>ƒê·∫°i ƒë·ªôi 13</Text></Text>
                </View>
            </View>
        </ScrollView>
    );


    // Sub Tab UI Component
    const SubTabGiaovien = ({ labels }) => {

        const renderContent = () => {
            switch (activeSubTab) {
                case 0:
                    return <Giaovien questions={questions} setQuestions={setQuestions} clearAllData={clearAllData} />;
                case 1:
                    return <Hocsinh students={students} setStudents={setStudents} />;
                default:
                    return <Text>Kh√¥ng c√≥ n·ªôi dung</Text>;
            }
        };

        return (
            <View style={{ flex: 1 }}>
                <View style={styles.subTabBar}>
                    {labels.map((label, index) => (
                        <TouchableOpacity
                            key={index}
                            style={[styles.subTabButton, activeSubTab === index && styles.subTabButtonActive]}
                            onPress={() => setActiveSubTab(index)}
                        >
                            <Text style={activeSubTab === index ? styles.subTabTextActive : styles.subTabText}>
                                {label}
                            </Text>
                        </TouchableOpacity>
                    ))}
                </View>
                <View style={styles.container}>{renderContent()}</View>
            </View>
        );
    };

    const Tab2 = () => <Camera results={results} setResults={setResults} questions={questions} />;
    const Tab3 = () => (
        <Ketqua
            results={results}
            points={points}
            rankThresholds={rankThresholds}
        />
    );

    return (
        <View style={styles.center}>
            <View style={{ flex: 1, display: active === 0 ? 'flex' : 'none' }}>
                <FlatList
                    data={[{ key: 'content' }]} // M·∫£ng data gi·∫£
                    renderItem={() => (
                        <View >
                            <TouchableOpacity onPress={() => setShowPointInput(!showPointInput)} style={styles.button}>
                                <Text style={styles.buttonText}>
                                    {showPointInput ? '·∫®n nh·∫≠p ƒëi·ªÉm/c√¢u' : 'Hi·ªán nh·∫≠p ƒëi·ªÉm/c√¢u'}
                                </Text>
                            </TouchableOpacity>

                            {showPointInput && (
                                <View style={styles.container}>
                                    <Text style={styles.title}>Nh·∫≠p s·ªë ƒëi·ªÉm/c√¢u</Text>
                                    <TextInput
                                        style={styles.textInput}
                                        placeholder="Nh·∫≠p ƒëi·ªÉm s·ªë/c√¢u VD 0.25 ..."
                                        value={pointPerQuestion}
                                        onChangeText={setPointPerQuestion}
                                        keyboardType="numeric"
                                    />
                                </View>
                            )}

                            {/* Subtabs ho·∫∑c n·ªôi dung ch√≠nh */}
                            <SubTabGiaovien labels={['Tr·∫Øc nghi·ªám', 'H·ªçc sinh']} />
                        </View>
                    )}
                />
            </View>

            <View style={{ flex: 1, display: active === 1 ? 'flex' : 'none' }}>
                <Tab2 />
            </View>
            <View style={{ flex: 1, display: active === 2 ? 'flex' : 'none' }}>
                <ScrollView >

                    <TouchableOpacity onPress={() => setShowPointInput(!showPointInput)} style={styles.button}>
                        <Text style={styles.buttonText}>
                            {showPointInput ? '·∫®n nh·∫≠p x·∫øp lo·∫°i' : 'Hi·ªán nh·∫≠p x·∫øp lo·∫°i'}
                        </Text>
                    </TouchableOpacity>

                    {showPointInput && (
                        <View style={styles.scrollView}>
                            {/* Ng∆∞·ª°ng x·∫øp lo·∫°i */}
                            <Text style={{ fontWeight: 'bold', fontSize: 16 }}>üîß Ng∆∞·ª°ng x·∫øp lo·∫°i:</Text>

                            <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
                                {['gioi', 'kha', 'tb'].map((key) => (
                                    <View key={key} style={{ flex: 1, marginHorizontal: 4 }}>
                                        <Text style={{ fontSize: 14, fontWeight: '600', marginBottom: 4 }}>
                                            {key === 'gioi' ? 'üåü ‚â• Gi·ªèi' : key === 'kha' ? 'üëç ‚â• Kh√°' : 'üôÇ ‚â• Trung b√¨nh'}
                                        </Text>
                                        <TextInput
                                            keyboardType="decimal-pad"
                                            value={String(rankThresholds[key] ?? '')}
                                            placeholder={
                                                key === 'gioi'
                                                    ? 'Gi·ªèi'
                                                    : key === 'kha'
                                                        ? 'Kh√°'
                                                        : key === 'trungbinh'
                                                            ? 'Trung b√¨nh'
                                                            : 'Y·∫øu'
                                            }
                                            onChangeText={(text) => setRankThresholds((prev) => ({ ...prev, [key]: text }))}
                                            style={styles.textInput}
                                        />
                                    </View>
                                ))}
                            </View>
                        </View>
                    )}

                    {/* Subtabs ho·∫∑c n·ªôi dung ch√≠nh */}
                    <Tab3 />
                </ScrollView>

            </View>

            <View style={styles.tabBar}>
                <TouchableOpacity
                    onPress={() => setActive(0)}
                    style={[styles.tabButton, active === 0 && styles.activeTab]}
                >
                    <Text style={[styles.tabButtonText, active === 0 && styles.activeText]}>Gi√°o vi√™n</Text>
                </TouchableOpacity>

                <TouchableOpacity
                    onPress={() => setActive(1)}
                    style={[styles.tabButton, active === 1 && styles.activeTab]}
                >
                    <Text style={[styles.tabButtonText, active === 1 && styles.activeText]}>Qu√©t m√£</Text>
                </TouchableOpacity>

                <TouchableOpacity
                    onPress={() => setActive(2)}
                    style={[styles.tabButton, active === 2 && styles.activeTab]}
                >
                    <Text style={[styles.tabButtonText, active === 2 && styles.activeText]}>K·∫øt qu·∫£</Text>
                </TouchableOpacity>
            </View>
        </View>
    );
}
